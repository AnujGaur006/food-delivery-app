// Planning how to build UI 

lecture 01 : things covered
 -> import react libraries into html/js 
 -> what are cdn Links
 -> what are package and package.json file
 -> what are ndoe_modules, .parcel-cache, and dist folder in react 
 -> how to start an react application
 -> what is parcel and its capabilities

lecture 02 : things covered
 -> what is jsx
 -> what is babil - js compiler and tranpiler
 -> basics about component rendering

lecture 03: things covered
 -> planning before desiging an application
 -> use of props, configuration driven UI
 -> types of export and import

Header
 -> Logo
 -> Nav Items
Body
 -> Search
 -> Individual Tiles
Footer
 -> Different Links
 -> Address
 -> Policies

lecture 04, 05 : things covered

 -> use of Hooks, type of hooks in react
 -> State Variables
 -> Concepts such as dom manipulation, Reconcilation algorithm, react fiber
 -> type of architecture while designing an application - monlithic/ microservices
 -> using actual data from swiggy api instead of dummy data

 Day 02 - add top rated restaurants btn > 4.0 stars

 React Hooks - Normal JS Utility Functions
  - useState() -> syntax const [restaurant, setRestaurant] = useState([defaultObj]);
  - useEffect() -> syntax useEffect(() => {fetchData()}, []);   
  fetchData(), will fetch data from api call, and then update setRestaurant() to have updates resList
  02. if there is no data, add no loading option..
  03. 

lecture 06 - things completed
 -> useEffect hook   
 -> using swiggy api to fetch restaurant list   
 -> cors policy
 -> shimmer UI - Shimmer component to replace loading screen - good alternative then loading option
 -> conditional rendering
 -> using state variable for login and logout btn toggle
 -> add a input search btn and implement search functionality
 -> onChange event handler, because input tag value is binded to state variable & can be directly changed
 -> add new restaurants on user scrolls across page - <to be done>

lecture 07 - things covered
 -> routing configuration
 -> useBrowserRoute and RouteProvider
 -> child routes
 -> Link react router dom
 -> dynamic routing
    --> add individual restaurant cards
    --> fetchMenu() - show recommended Items
    --> try to build only veg options

Types of Routing in Web Application 
 -> Server Side Routing -> server sends an individual file for each request, having individual html files 
 -> Client Side Routing -> having everything on browser side, single application page

 lecture 08 -> things covered
  -> class based component, state variables in class based component 
  -> how class based component lifecycle looks like - first instance of that class is created, which calls constructor and then render 
    is called
  -> ComponentDidMount - useCase [to make api calls, ] follows same principle, component is called -> first render -> fetch data -> re-render
  -> React lifecycle - https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
  -> Render Phase[Mounting, Rendering, Unmounting], Commit Phase [componentDidMount, DidUpdate, Unmount]
  -> making an api call inside a class based component
  -> useEffect != ComponentDidMount
  -> componentWillUnmount - is used for clean up task, when user exits certain component, unmount is called
  -> similar thing is achieved in useEffect by returning executable fn in callback func parameter of useEffect . 

  lecture 08 -> things covered
  -> class based component, state variables in class based component 
  -> how class based component lifecycle looks like - first instance of that class is created, which calls constructor and then render 
    is called
  -> ComponentDidMount - useCase [to make api calls, ] follows same principle, component is called -> first render -> fetch data -> re-render
  -> React lifecycle - https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
  -> Render Phase[Mounting, Rendering, Unmounting], Commit Phase [componentDidMount, DidUpdate, Unmount]
  -> making an api call inside a class based component
  -> useEffect != ComponentDidMount
  -> componentWillUnmount - is used for clean up task, when user exits certain component, unmount is called
  -> similar thing is achieved in useEffect by returning executable fn in callback func parameter of useEffect . 

  lecture 09 -> things covered
  -> single responsibility principle
  -> custom hooks - allows room to abstraction, modularity and cleaner code.
  -> online/offline feature